// Generated by the protocol buffer compiler.  DO NOT EDIT!
// clang-format off
// source: google/protobuf/struct.proto

#import "VPKGPBProtocolBuffers_RuntimeSupport.h"
#import "VPKGPBStruct.pbobjc.h"

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
VPKGPBObjCClassDeclaration(VPKGPBListValue);
VPKGPBObjCClassDeclaration(VPKGPBStruct);
VPKGPBObjCClassDeclaration(VPKGPBValue);

#pragma mark - VPKGPBStructRoot

@implementation VPKGPBStructRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

static VPKGPBFileDescription VPKGPBStructRoot_FileDescription = {
  .package = "google.protobuf",
  .prefix = "VPKGPB",
  .syntax = VPKGPBFileSyntaxProto3
};

#pragma mark - Enum VPKGPBNullValue

VPKGPBEnumDescriptor *VPKGPBNullValue_EnumDescriptor(void) {
  static _Atomic(VPKGPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    VPKGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "NullValue\000";
    static const int32_t values[] = {
        VPKGPBNullValue_NullValue,
    };
    VPKGPBEnumDescriptor *worker =
        [VPKGPBEnumDescriptor allocDescriptorForName:VPKGPBNSStringifySymbol(VPKGPBNullValue)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:VPKGPBNullValue_IsValidValue
                                            flags:VPKGPBEnumDescriptorInitializationFlag_None];
    VPKGPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL VPKGPBNullValue_IsValidValue(int32_t value__) {
  switch (value__) {
    case VPKGPBNullValue_NullValue:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - VPKGPBStruct

@implementation VPKGPBStruct

@dynamic fields, fields_Count;

typedef struct VPKGPBStruct__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *fields;
} VPKGPBStruct__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (VPKGPBDescriptor *)descriptor {
  static VPKGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    VPKGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static VPKGPBMessageFieldDescription fields[] = {
      {
        .name = "fields",
        .dataTypeSpecific.clazz = VPKGPBObjCClass(VPKGPBValue),
        .number = VPKGPBStruct_FieldNumber_Fields,
        .hasIndex = VPKGPBNoHasBit,
        .offset = (uint32_t)offsetof(VPKGPBStruct__storage_, fields),
        .flags = VPKGPBFieldMapKeyString,
        .dataType = VPKGPBDataTypeMessage,
      },
    };
    VPKGPBDescriptor *localDescriptor =
        [VPKGPBDescriptor allocDescriptorForClass:VPKGPBObjCClass(VPKGPBStruct)
                                   messageName:@"Struct"
                               fileDescription:&VPKGPBStructRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(VPKGPBMessageFieldDescription))
                                   storageSize:sizeof(VPKGPBStruct__storage_)
                                         flags:(VPKGPBDescriptorInitializationFlags)(VPKGPBDescriptorInitializationFlag_UsesClassRefs | VPKGPBDescriptorInitializationFlag_Proto3OptionalKnown | VPKGPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VPKGPBValue

@implementation VPKGPBValue

@dynamic kindOneOfCase;
@dynamic nullValue;
@dynamic numberValue;
@dynamic stringValue;
@dynamic boolValue;
@dynamic structValue;
@dynamic listValue;

typedef struct VPKGPBValue__storage_ {
  uint32_t _has_storage_[2];
  VPKGPBNullValue nullValue;
  NSString *stringValue;
  VPKGPBStruct *structValue;
  VPKGPBListValue *listValue;
  double numberValue;
} VPKGPBValue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (VPKGPBDescriptor *)descriptor {
  static VPKGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    VPKGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static VPKGPBMessageFieldDescription fields[] = {
      {
        .name = "nullValue",
        .dataTypeSpecific.enumDescFunc = VPKGPBNullValue_EnumDescriptor,
        .number = VPKGPBValue_FieldNumber_NullValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(VPKGPBValue__storage_, nullValue),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldHasEnumDescriptor),
        .dataType = VPKGPBDataTypeEnum,
      },
      {
        .name = "numberValue",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBValue_FieldNumber_NumberValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(VPKGPBValue__storage_, numberValue),
        .flags = VPKGPBFieldOptional,
        .dataType = VPKGPBDataTypeDouble,
      },
      {
        .name = "stringValue",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBValue_FieldNumber_StringValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(VPKGPBValue__storage_, stringValue),
        .flags = VPKGPBFieldOptional,
        .dataType = VPKGPBDataTypeString,
      },
      {
        .name = "boolValue",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBValue_FieldNumber_BoolValue,
        .hasIndex = -1,
        .offset = 0,  // Stored in _has_storage_ to save space.
        .flags = VPKGPBFieldOptional,
        .dataType = VPKGPBDataTypeBool,
      },
      {
        .name = "structValue",
        .dataTypeSpecific.clazz = VPKGPBObjCClass(VPKGPBStruct),
        .number = VPKGPBValue_FieldNumber_StructValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(VPKGPBValue__storage_, structValue),
        .flags = VPKGPBFieldOptional,
        .dataType = VPKGPBDataTypeMessage,
      },
      {
        .name = "listValue",
        .dataTypeSpecific.clazz = VPKGPBObjCClass(VPKGPBListValue),
        .number = VPKGPBValue_FieldNumber_ListValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(VPKGPBValue__storage_, listValue),
        .flags = VPKGPBFieldOptional,
        .dataType = VPKGPBDataTypeMessage,
      },
    };
    VPKGPBDescriptor *localDescriptor =
        [VPKGPBDescriptor allocDescriptorForClass:VPKGPBObjCClass(VPKGPBValue)
                                   messageName:@"Value"
                               fileDescription:&VPKGPBStructRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(VPKGPBMessageFieldDescription))
                                   storageSize:sizeof(VPKGPBValue__storage_)
                                         flags:(VPKGPBDescriptorInitializationFlags)(VPKGPBDescriptorInitializationFlag_UsesClassRefs | VPKGPBDescriptorInitializationFlag_Proto3OptionalKnown | VPKGPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    static const char *oneofs[] = {
      "kind",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t VPKGPBValue_NullValue_RawValue(VPKGPBValue *message) {
  VPKGPBDescriptor *descriptor = [VPKGPBValue descriptor];
  VPKGPBFieldDescriptor *field = [descriptor fieldWithNumber:VPKGPBValue_FieldNumber_NullValue];
  return VPKGPBGetMessageRawEnumField(message, field);
}

void SetVPKGPBValue_NullValue_RawValue(VPKGPBValue *message, int32_t value) {
  VPKGPBDescriptor *descriptor = [VPKGPBValue descriptor];
  VPKGPBFieldDescriptor *field = [descriptor fieldWithNumber:VPKGPBValue_FieldNumber_NullValue];
  VPKGPBSetMessageRawEnumField(message, field, value);
}

void VPKGPBValue_ClearKindOneOfCase(VPKGPBValue *message) {
  VPKGPBDescriptor *descriptor = [VPKGPBValue descriptor];
  VPKGPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  VPKGPBClearOneof(message, oneof);
}
#pragma mark - VPKGPBListValue

@implementation VPKGPBListValue

@dynamic valuesArray, valuesArray_Count;

typedef struct VPKGPBListValue__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *valuesArray;
} VPKGPBListValue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (VPKGPBDescriptor *)descriptor {
  static VPKGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    VPKGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static VPKGPBMessageFieldDescription fields[] = {
      {
        .name = "valuesArray",
        .dataTypeSpecific.clazz = VPKGPBObjCClass(VPKGPBValue),
        .number = VPKGPBListValue_FieldNumber_ValuesArray,
        .hasIndex = VPKGPBNoHasBit,
        .offset = (uint32_t)offsetof(VPKGPBListValue__storage_, valuesArray),
        .flags = VPKGPBFieldRepeated,
        .dataType = VPKGPBDataTypeMessage,
      },
    };
    VPKGPBDescriptor *localDescriptor =
        [VPKGPBDescriptor allocDescriptorForClass:VPKGPBObjCClass(VPKGPBListValue)
                                   messageName:@"ListValue"
                               fileDescription:&VPKGPBStructRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(VPKGPBMessageFieldDescription))
                                   storageSize:sizeof(VPKGPBListValue__storage_)
                                         flags:(VPKGPBDescriptorInitializationFlags)(VPKGPBDescriptorInitializationFlag_UsesClassRefs | VPKGPBDescriptorInitializationFlag_Proto3OptionalKnown | VPKGPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
