// Generated by the protocol buffer compiler.  DO NOT EDIT!
// clang-format off
// source: google/protobuf/api.proto

#import "VPKGPBProtocolBuffers_RuntimeSupport.h"
#import "VPKGPBApi.pbobjc.h"

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
VPKGPBObjCClassDeclaration(VPKGPBApi);
VPKGPBObjCClassDeclaration(VPKGPBMethod);
VPKGPBObjCClassDeclaration(VPKGPBMixin);
VPKGPBObjCClassDeclaration(VPKGPBOption);
VPKGPBObjCClassDeclaration(VPKGPBSourceContext);

#pragma mark - VPKGPBApiRoot

@implementation VPKGPBApiRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

static VPKGPBFileDescription VPKGPBApiRoot_FileDescription = {
  .package = "google.protobuf",
  .prefix = "VPKGPB",
  .syntax = VPKGPBFileSyntaxProto3
};

#pragma mark - VPKGPBApi

@implementation VPKGPBApi

@dynamic name;
@dynamic methodsArray, methodsArray_Count;
@dynamic optionsArray, optionsArray_Count;
@dynamic version;
@dynamic hasSourceContext, sourceContext;
@dynamic mixinsArray, mixinsArray_Count;
@dynamic syntax;

typedef struct VPKGPBApi__storage_ {
  uint32_t _has_storage_[1];
  VPKGPBSyntax syntax;
  NSString *name;
  NSMutableArray *methodsArray;
  NSMutableArray *optionsArray;
  NSString *version;
  VPKGPBSourceContext *sourceContext;
  NSMutableArray *mixinsArray;
} VPKGPBApi__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (VPKGPBDescriptor *)descriptor {
  static VPKGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    VPKGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static VPKGPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBApi_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VPKGPBApi__storage_, name),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeString,
      },
      {
        .name = "methodsArray",
        .dataTypeSpecific.clazz = VPKGPBObjCClass(VPKGPBMethod),
        .number = VPKGPBApi_FieldNumber_MethodsArray,
        .hasIndex = VPKGPBNoHasBit,
        .offset = (uint32_t)offsetof(VPKGPBApi__storage_, methodsArray),
        .flags = VPKGPBFieldRepeated,
        .dataType = VPKGPBDataTypeMessage,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.clazz = VPKGPBObjCClass(VPKGPBOption),
        .number = VPKGPBApi_FieldNumber_OptionsArray,
        .hasIndex = VPKGPBNoHasBit,
        .offset = (uint32_t)offsetof(VPKGPBApi__storage_, optionsArray),
        .flags = VPKGPBFieldRepeated,
        .dataType = VPKGPBDataTypeMessage,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBApi_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VPKGPBApi__storage_, version),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeString,
      },
      {
        .name = "sourceContext",
        .dataTypeSpecific.clazz = VPKGPBObjCClass(VPKGPBSourceContext),
        .number = VPKGPBApi_FieldNumber_SourceContext,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VPKGPBApi__storage_, sourceContext),
        .flags = VPKGPBFieldOptional,
        .dataType = VPKGPBDataTypeMessage,
      },
      {
        .name = "mixinsArray",
        .dataTypeSpecific.clazz = VPKGPBObjCClass(VPKGPBMixin),
        .number = VPKGPBApi_FieldNumber_MixinsArray,
        .hasIndex = VPKGPBNoHasBit,
        .offset = (uint32_t)offsetof(VPKGPBApi__storage_, mixinsArray),
        .flags = VPKGPBFieldRepeated,
        .dataType = VPKGPBDataTypeMessage,
      },
      {
        .name = "syntax",
        .dataTypeSpecific.enumDescFunc = VPKGPBSyntax_EnumDescriptor,
        .number = VPKGPBApi_FieldNumber_Syntax,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VPKGPBApi__storage_, syntax),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldHasEnumDescriptor | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeEnum,
      },
    };
    VPKGPBDescriptor *localDescriptor =
        [VPKGPBDescriptor allocDescriptorForClass:VPKGPBObjCClass(VPKGPBApi)
                                   messageName:@"Api"
                               fileDescription:&VPKGPBApiRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(VPKGPBMessageFieldDescription))
                                   storageSize:sizeof(VPKGPBApi__storage_)
                                         flags:(VPKGPBDescriptorInitializationFlags)(VPKGPBDescriptorInitializationFlag_UsesClassRefs | VPKGPBDescriptorInitializationFlag_Proto3OptionalKnown | VPKGPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t VPKGPBApi_Syntax_RawValue(VPKGPBApi *message) {
  VPKGPBDescriptor *descriptor = [VPKGPBApi descriptor];
  VPKGPBFieldDescriptor *field = [descriptor fieldWithNumber:VPKGPBApi_FieldNumber_Syntax];
  return VPKGPBGetMessageRawEnumField(message, field);
}

void SetVPKGPBApi_Syntax_RawValue(VPKGPBApi *message, int32_t value) {
  VPKGPBDescriptor *descriptor = [VPKGPBApi descriptor];
  VPKGPBFieldDescriptor *field = [descriptor fieldWithNumber:VPKGPBApi_FieldNumber_Syntax];
  VPKGPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - VPKGPBMethod

@implementation VPKGPBMethod

@dynamic name;
@dynamic requestTypeURL;
@dynamic requestStreaming;
@dynamic responseTypeURL;
@dynamic responseStreaming;
@dynamic optionsArray, optionsArray_Count;
@dynamic syntax;

typedef struct VPKGPBMethod__storage_ {
  uint32_t _has_storage_[1];
  VPKGPBSyntax syntax;
  NSString *name;
  NSString *requestTypeURL;
  NSString *responseTypeURL;
  NSMutableArray *optionsArray;
} VPKGPBMethod__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (VPKGPBDescriptor *)descriptor {
  static VPKGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    VPKGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static VPKGPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBMethod_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VPKGPBMethod__storage_, name),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeString,
      },
      {
        .name = "requestTypeURL",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBMethod_FieldNumber_RequestTypeURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VPKGPBMethod__storage_, requestTypeURL),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldTextFormatNameCustom | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeString,
      },
      {
        .name = "requestStreaming",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBMethod_FieldNumber_RequestStreaming,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeBool,
      },
      {
        .name = "responseTypeURL",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBMethod_FieldNumber_ResponseTypeURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VPKGPBMethod__storage_, responseTypeURL),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldTextFormatNameCustom | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeString,
      },
      {
        .name = "responseStreaming",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBMethod_FieldNumber_ResponseStreaming,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeBool,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.clazz = VPKGPBObjCClass(VPKGPBOption),
        .number = VPKGPBMethod_FieldNumber_OptionsArray,
        .hasIndex = VPKGPBNoHasBit,
        .offset = (uint32_t)offsetof(VPKGPBMethod__storage_, optionsArray),
        .flags = VPKGPBFieldRepeated,
        .dataType = VPKGPBDataTypeMessage,
      },
      {
        .name = "syntax",
        .dataTypeSpecific.enumDescFunc = VPKGPBSyntax_EnumDescriptor,
        .number = VPKGPBMethod_FieldNumber_Syntax,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(VPKGPBMethod__storage_, syntax),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldHasEnumDescriptor | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeEnum,
      },
    };
    VPKGPBDescriptor *localDescriptor =
        [VPKGPBDescriptor allocDescriptorForClass:VPKGPBObjCClass(VPKGPBMethod)
                                   messageName:@"Method"
                               fileDescription:&VPKGPBApiRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(VPKGPBMessageFieldDescription))
                                   storageSize:sizeof(VPKGPBMethod__storage_)
                                         flags:(VPKGPBDescriptorInitializationFlags)(VPKGPBDescriptorInitializationFlag_UsesClassRefs | VPKGPBDescriptorInitializationFlag_Proto3OptionalKnown | VPKGPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
#if !VPKGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\007\244\241!!\000\004\010\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !VPKGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t VPKGPBMethod_Syntax_RawValue(VPKGPBMethod *message) {
  VPKGPBDescriptor *descriptor = [VPKGPBMethod descriptor];
  VPKGPBFieldDescriptor *field = [descriptor fieldWithNumber:VPKGPBMethod_FieldNumber_Syntax];
  return VPKGPBGetMessageRawEnumField(message, field);
}

void SetVPKGPBMethod_Syntax_RawValue(VPKGPBMethod *message, int32_t value) {
  VPKGPBDescriptor *descriptor = [VPKGPBMethod descriptor];
  VPKGPBFieldDescriptor *field = [descriptor fieldWithNumber:VPKGPBMethod_FieldNumber_Syntax];
  VPKGPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - VPKGPBMixin

@implementation VPKGPBMixin

@dynamic name;
@dynamic root;

typedef struct VPKGPBMixin__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *root;
} VPKGPBMixin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (VPKGPBDescriptor *)descriptor {
  static VPKGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    VPKGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static VPKGPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBMixin_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VPKGPBMixin__storage_, name),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeString,
      },
      {
        .name = "root",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBMixin_FieldNumber_Root,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VPKGPBMixin__storage_, root),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeString,
      },
    };
    VPKGPBDescriptor *localDescriptor =
        [VPKGPBDescriptor allocDescriptorForClass:VPKGPBObjCClass(VPKGPBMixin)
                                   messageName:@"Mixin"
                               fileDescription:&VPKGPBApiRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(VPKGPBMessageFieldDescription))
                                   storageSize:sizeof(VPKGPBMixin__storage_)
                                         flags:(VPKGPBDescriptorInitializationFlags)(VPKGPBDescriptorInitializationFlag_UsesClassRefs | VPKGPBDescriptorInitializationFlag_Proto3OptionalKnown | VPKGPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
