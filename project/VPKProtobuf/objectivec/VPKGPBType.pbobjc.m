// Generated by the protocol buffer compiler.  DO NOT EDIT!
// clang-format off
// source: google/protobuf/type.proto

#import "VPKGPBProtocolBuffers_RuntimeSupport.h"
#import "VPKGPBType.pbobjc.h"

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
VPKGPBObjCClassDeclaration(VPKGPBAny);
VPKGPBObjCClassDeclaration(VPKGPBEnum);
VPKGPBObjCClassDeclaration(VPKGPBEnumValue);
VPKGPBObjCClassDeclaration(VPKGPBField);
VPKGPBObjCClassDeclaration(VPKGPBOption);
VPKGPBObjCClassDeclaration(VPKGPBSourceContext);
VPKGPBObjCClassDeclaration(VPKGPBType);

#pragma mark - VPKGPBTypeRoot

@implementation VPKGPBTypeRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

static VPKGPBFileDescription VPKGPBTypeRoot_FileDescription = {
  .package = "google.protobuf",
  .prefix = "VPKGPB",
  .syntax = VPKGPBFileSyntaxProto3
};

#pragma mark - Enum VPKGPBSyntax

VPKGPBEnumDescriptor *VPKGPBSyntax_EnumDescriptor(void) {
  static _Atomic(VPKGPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    VPKGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "SyntaxProto2\000SyntaxProto3\000";
    static const int32_t values[] = {
        VPKGPBSyntax_SyntaxProto2,
        VPKGPBSyntax_SyntaxProto3,
    };
    VPKGPBEnumDescriptor *worker =
        [VPKGPBEnumDescriptor allocDescriptorForName:VPKGPBNSStringifySymbol(VPKGPBSyntax)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:VPKGPBSyntax_IsValidValue
                                            flags:VPKGPBEnumDescriptorInitializationFlag_None];
    VPKGPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL VPKGPBSyntax_IsValidValue(int32_t value__) {
  switch (value__) {
    case VPKGPBSyntax_SyntaxProto2:
    case VPKGPBSyntax_SyntaxProto3:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum VPKGPBField_Kind

VPKGPBEnumDescriptor *VPKGPBField_Kind_EnumDescriptor(void) {
  static _Atomic(VPKGPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    VPKGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "TypeUnknown\000TypeDouble\000TypeFloat\000TypeInt"
        "64\000TypeUint64\000TypeInt32\000TypeFixed64\000Type"
        "Fixed32\000TypeBool\000TypeString\000TypeGroup\000Ty"
        "peMessage\000TypeBytes\000TypeUint32\000TypeEnum\000"
        "TypeSfixed32\000TypeSfixed64\000TypeSint32\000Typ"
        "eSint64\000";
    static const int32_t values[] = {
        VPKGPBField_Kind_TypeUnknown,
        VPKGPBField_Kind_TypeDouble,
        VPKGPBField_Kind_TypeFloat,
        VPKGPBField_Kind_TypeInt64,
        VPKGPBField_Kind_TypeUint64,
        VPKGPBField_Kind_TypeInt32,
        VPKGPBField_Kind_TypeFixed64,
        VPKGPBField_Kind_TypeFixed32,
        VPKGPBField_Kind_TypeBool,
        VPKGPBField_Kind_TypeString,
        VPKGPBField_Kind_TypeGroup,
        VPKGPBField_Kind_TypeMessage,
        VPKGPBField_Kind_TypeBytes,
        VPKGPBField_Kind_TypeUint32,
        VPKGPBField_Kind_TypeEnum,
        VPKGPBField_Kind_TypeSfixed32,
        VPKGPBField_Kind_TypeSfixed64,
        VPKGPBField_Kind_TypeSint32,
        VPKGPBField_Kind_TypeSint64,
    };
    VPKGPBEnumDescriptor *worker =
        [VPKGPBEnumDescriptor allocDescriptorForName:VPKGPBNSStringifySymbol(VPKGPBField_Kind)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:VPKGPBField_Kind_IsValidValue
                                            flags:VPKGPBEnumDescriptorInitializationFlag_None];
    VPKGPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL VPKGPBField_Kind_IsValidValue(int32_t value__) {
  switch (value__) {
    case VPKGPBField_Kind_TypeUnknown:
    case VPKGPBField_Kind_TypeDouble:
    case VPKGPBField_Kind_TypeFloat:
    case VPKGPBField_Kind_TypeInt64:
    case VPKGPBField_Kind_TypeUint64:
    case VPKGPBField_Kind_TypeInt32:
    case VPKGPBField_Kind_TypeFixed64:
    case VPKGPBField_Kind_TypeFixed32:
    case VPKGPBField_Kind_TypeBool:
    case VPKGPBField_Kind_TypeString:
    case VPKGPBField_Kind_TypeGroup:
    case VPKGPBField_Kind_TypeMessage:
    case VPKGPBField_Kind_TypeBytes:
    case VPKGPBField_Kind_TypeUint32:
    case VPKGPBField_Kind_TypeEnum:
    case VPKGPBField_Kind_TypeSfixed32:
    case VPKGPBField_Kind_TypeSfixed64:
    case VPKGPBField_Kind_TypeSint32:
    case VPKGPBField_Kind_TypeSint64:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum VPKGPBField_Cardinality

VPKGPBEnumDescriptor *VPKGPBField_Cardinality_EnumDescriptor(void) {
  static _Atomic(VPKGPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    VPKGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "CardinalityUnknown\000CardinalityOptional\000C"
        "ardinalityRequired\000CardinalityRepeated\000";
    static const int32_t values[] = {
        VPKGPBField_Cardinality_CardinalityUnknown,
        VPKGPBField_Cardinality_CardinalityOptional,
        VPKGPBField_Cardinality_CardinalityRequired,
        VPKGPBField_Cardinality_CardinalityRepeated,
    };
    VPKGPBEnumDescriptor *worker =
        [VPKGPBEnumDescriptor allocDescriptorForName:VPKGPBNSStringifySymbol(VPKGPBField_Cardinality)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:VPKGPBField_Cardinality_IsValidValue
                                            flags:VPKGPBEnumDescriptorInitializationFlag_None];
    VPKGPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL VPKGPBField_Cardinality_IsValidValue(int32_t value__) {
  switch (value__) {
    case VPKGPBField_Cardinality_CardinalityUnknown:
    case VPKGPBField_Cardinality_CardinalityOptional:
    case VPKGPBField_Cardinality_CardinalityRequired:
    case VPKGPBField_Cardinality_CardinalityRepeated:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - VPKGPBType

@implementation VPKGPBType

@dynamic name;
@dynamic fieldsArray, fieldsArray_Count;
@dynamic oneofsArray, oneofsArray_Count;
@dynamic optionsArray, optionsArray_Count;
@dynamic hasSourceContext, sourceContext;
@dynamic syntax;

typedef struct VPKGPBType__storage_ {
  uint32_t _has_storage_[1];
  VPKGPBSyntax syntax;
  NSString *name;
  NSMutableArray *fieldsArray;
  NSMutableArray *oneofsArray;
  NSMutableArray *optionsArray;
  VPKGPBSourceContext *sourceContext;
} VPKGPBType__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (VPKGPBDescriptor *)descriptor {
  static VPKGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    VPKGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static VPKGPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBType_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VPKGPBType__storage_, name),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeString,
      },
      {
        .name = "fieldsArray",
        .dataTypeSpecific.clazz = VPKGPBObjCClass(VPKGPBField),
        .number = VPKGPBType_FieldNumber_FieldsArray,
        .hasIndex = VPKGPBNoHasBit,
        .offset = (uint32_t)offsetof(VPKGPBType__storage_, fieldsArray),
        .flags = VPKGPBFieldRepeated,
        .dataType = VPKGPBDataTypeMessage,
      },
      {
        .name = "oneofsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBType_FieldNumber_OneofsArray,
        .hasIndex = VPKGPBNoHasBit,
        .offset = (uint32_t)offsetof(VPKGPBType__storage_, oneofsArray),
        .flags = VPKGPBFieldRepeated,
        .dataType = VPKGPBDataTypeString,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.clazz = VPKGPBObjCClass(VPKGPBOption),
        .number = VPKGPBType_FieldNumber_OptionsArray,
        .hasIndex = VPKGPBNoHasBit,
        .offset = (uint32_t)offsetof(VPKGPBType__storage_, optionsArray),
        .flags = VPKGPBFieldRepeated,
        .dataType = VPKGPBDataTypeMessage,
      },
      {
        .name = "sourceContext",
        .dataTypeSpecific.clazz = VPKGPBObjCClass(VPKGPBSourceContext),
        .number = VPKGPBType_FieldNumber_SourceContext,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VPKGPBType__storage_, sourceContext),
        .flags = VPKGPBFieldOptional,
        .dataType = VPKGPBDataTypeMessage,
      },
      {
        .name = "syntax",
        .dataTypeSpecific.enumDescFunc = VPKGPBSyntax_EnumDescriptor,
        .number = VPKGPBType_FieldNumber_Syntax,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VPKGPBType__storage_, syntax),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldHasEnumDescriptor | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeEnum,
      },
    };
    VPKGPBDescriptor *localDescriptor =
        [VPKGPBDescriptor allocDescriptorForClass:VPKGPBObjCClass(VPKGPBType)
                                   messageName:@"Type"
                               fileDescription:&VPKGPBTypeRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(VPKGPBMessageFieldDescription))
                                   storageSize:sizeof(VPKGPBType__storage_)
                                         flags:(VPKGPBDescriptorInitializationFlags)(VPKGPBDescriptorInitializationFlag_UsesClassRefs | VPKGPBDescriptorInitializationFlag_Proto3OptionalKnown | VPKGPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t VPKGPBType_Syntax_RawValue(VPKGPBType *message) {
  VPKGPBDescriptor *descriptor = [VPKGPBType descriptor];
  VPKGPBFieldDescriptor *field = [descriptor fieldWithNumber:VPKGPBType_FieldNumber_Syntax];
  return VPKGPBGetMessageRawEnumField(message, field);
}

void SetVPKGPBType_Syntax_RawValue(VPKGPBType *message, int32_t value) {
  VPKGPBDescriptor *descriptor = [VPKGPBType descriptor];
  VPKGPBFieldDescriptor *field = [descriptor fieldWithNumber:VPKGPBType_FieldNumber_Syntax];
  VPKGPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - VPKGPBField

@implementation VPKGPBField

@dynamic kind;
@dynamic cardinality;
@dynamic number;
@dynamic name;
@dynamic typeURL;
@dynamic oneofIndex;
@dynamic packed;
@dynamic optionsArray, optionsArray_Count;
@dynamic jsonName;
@dynamic defaultValue;

typedef struct VPKGPBField__storage_ {
  uint32_t _has_storage_[1];
  VPKGPBField_Kind kind;
  VPKGPBField_Cardinality cardinality;
  int32_t number;
  int32_t oneofIndex;
  NSString *name;
  NSString *typeURL;
  NSMutableArray *optionsArray;
  NSString *jsonName;
  NSString *defaultValue;
} VPKGPBField__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (VPKGPBDescriptor *)descriptor {
  static VPKGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    VPKGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static VPKGPBMessageFieldDescription fields[] = {
      {
        .name = "kind",
        .dataTypeSpecific.enumDescFunc = VPKGPBField_Kind_EnumDescriptor,
        .number = VPKGPBField_FieldNumber_Kind,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VPKGPBField__storage_, kind),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldHasEnumDescriptor | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeEnum,
      },
      {
        .name = "cardinality",
        .dataTypeSpecific.enumDescFunc = VPKGPBField_Cardinality_EnumDescriptor,
        .number = VPKGPBField_FieldNumber_Cardinality,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VPKGPBField__storage_, cardinality),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldHasEnumDescriptor | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeEnum,
      },
      {
        .name = "number",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBField_FieldNumber_Number,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VPKGPBField__storage_, number),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBField_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VPKGPBField__storage_, name),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeString,
      },
      {
        .name = "typeURL",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBField_FieldNumber_TypeURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VPKGPBField__storage_, typeURL),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldTextFormatNameCustom | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeString,
      },
      {
        .name = "oneofIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBField_FieldNumber_OneofIndex,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VPKGPBField__storage_, oneofIndex),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeInt32,
      },
      {
        .name = "packed",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBField_FieldNumber_Packed,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeBool,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.clazz = VPKGPBObjCClass(VPKGPBOption),
        .number = VPKGPBField_FieldNumber_OptionsArray,
        .hasIndex = VPKGPBNoHasBit,
        .offset = (uint32_t)offsetof(VPKGPBField__storage_, optionsArray),
        .flags = VPKGPBFieldRepeated,
        .dataType = VPKGPBDataTypeMessage,
      },
      {
        .name = "jsonName",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBField_FieldNumber_JsonName,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(VPKGPBField__storage_, jsonName),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeString,
      },
      {
        .name = "defaultValue",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBField_FieldNumber_DefaultValue,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(VPKGPBField__storage_, defaultValue),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeString,
      },
    };
    VPKGPBDescriptor *localDescriptor =
        [VPKGPBDescriptor allocDescriptorForClass:VPKGPBObjCClass(VPKGPBField)
                                   messageName:@"Field"
                               fileDescription:&VPKGPBTypeRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(VPKGPBMessageFieldDescription))
                                   storageSize:sizeof(VPKGPBField__storage_)
                                         flags:(VPKGPBDescriptorInitializationFlags)(VPKGPBDescriptorInitializationFlag_UsesClassRefs | VPKGPBDescriptorInitializationFlag_Proto3OptionalKnown | VPKGPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
#if !VPKGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !VPKGPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t VPKGPBField_Kind_RawValue(VPKGPBField *message) {
  VPKGPBDescriptor *descriptor = [VPKGPBField descriptor];
  VPKGPBFieldDescriptor *field = [descriptor fieldWithNumber:VPKGPBField_FieldNumber_Kind];
  return VPKGPBGetMessageRawEnumField(message, field);
}

void SetVPKGPBField_Kind_RawValue(VPKGPBField *message, int32_t value) {
  VPKGPBDescriptor *descriptor = [VPKGPBField descriptor];
  VPKGPBFieldDescriptor *field = [descriptor fieldWithNumber:VPKGPBField_FieldNumber_Kind];
  VPKGPBSetMessageRawEnumField(message, field, value);
}

int32_t VPKGPBField_Cardinality_RawValue(VPKGPBField *message) {
  VPKGPBDescriptor *descriptor = [VPKGPBField descriptor];
  VPKGPBFieldDescriptor *field = [descriptor fieldWithNumber:VPKGPBField_FieldNumber_Cardinality];
  return VPKGPBGetMessageRawEnumField(message, field);
}

void SetVPKGPBField_Cardinality_RawValue(VPKGPBField *message, int32_t value) {
  VPKGPBDescriptor *descriptor = [VPKGPBField descriptor];
  VPKGPBFieldDescriptor *field = [descriptor fieldWithNumber:VPKGPBField_FieldNumber_Cardinality];
  VPKGPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - VPKGPBEnum

@implementation VPKGPBEnum

@dynamic name;
@dynamic enumvalueArray, enumvalueArray_Count;
@dynamic optionsArray, optionsArray_Count;
@dynamic hasSourceContext, sourceContext;
@dynamic syntax;

typedef struct VPKGPBEnum__storage_ {
  uint32_t _has_storage_[1];
  VPKGPBSyntax syntax;
  NSString *name;
  NSMutableArray *enumvalueArray;
  NSMutableArray *optionsArray;
  VPKGPBSourceContext *sourceContext;
} VPKGPBEnum__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (VPKGPBDescriptor *)descriptor {
  static VPKGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    VPKGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static VPKGPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBEnum_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VPKGPBEnum__storage_, name),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeString,
      },
      {
        .name = "enumvalueArray",
        .dataTypeSpecific.clazz = VPKGPBObjCClass(VPKGPBEnumValue),
        .number = VPKGPBEnum_FieldNumber_EnumvalueArray,
        .hasIndex = VPKGPBNoHasBit,
        .offset = (uint32_t)offsetof(VPKGPBEnum__storage_, enumvalueArray),
        .flags = VPKGPBFieldRepeated,
        .dataType = VPKGPBDataTypeMessage,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.clazz = VPKGPBObjCClass(VPKGPBOption),
        .number = VPKGPBEnum_FieldNumber_OptionsArray,
        .hasIndex = VPKGPBNoHasBit,
        .offset = (uint32_t)offsetof(VPKGPBEnum__storage_, optionsArray),
        .flags = VPKGPBFieldRepeated,
        .dataType = VPKGPBDataTypeMessage,
      },
      {
        .name = "sourceContext",
        .dataTypeSpecific.clazz = VPKGPBObjCClass(VPKGPBSourceContext),
        .number = VPKGPBEnum_FieldNumber_SourceContext,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VPKGPBEnum__storage_, sourceContext),
        .flags = VPKGPBFieldOptional,
        .dataType = VPKGPBDataTypeMessage,
      },
      {
        .name = "syntax",
        .dataTypeSpecific.enumDescFunc = VPKGPBSyntax_EnumDescriptor,
        .number = VPKGPBEnum_FieldNumber_Syntax,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VPKGPBEnum__storage_, syntax),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldHasEnumDescriptor | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeEnum,
      },
    };
    VPKGPBDescriptor *localDescriptor =
        [VPKGPBDescriptor allocDescriptorForClass:VPKGPBObjCClass(VPKGPBEnum)
                                   messageName:@"Enum"
                               fileDescription:&VPKGPBTypeRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(VPKGPBMessageFieldDescription))
                                   storageSize:sizeof(VPKGPBEnum__storage_)
                                         flags:(VPKGPBDescriptorInitializationFlags)(VPKGPBDescriptorInitializationFlag_UsesClassRefs | VPKGPBDescriptorInitializationFlag_Proto3OptionalKnown | VPKGPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t VPKGPBEnum_Syntax_RawValue(VPKGPBEnum *message) {
  VPKGPBDescriptor *descriptor = [VPKGPBEnum descriptor];
  VPKGPBFieldDescriptor *field = [descriptor fieldWithNumber:VPKGPBEnum_FieldNumber_Syntax];
  return VPKGPBGetMessageRawEnumField(message, field);
}

void SetVPKGPBEnum_Syntax_RawValue(VPKGPBEnum *message, int32_t value) {
  VPKGPBDescriptor *descriptor = [VPKGPBEnum descriptor];
  VPKGPBFieldDescriptor *field = [descriptor fieldWithNumber:VPKGPBEnum_FieldNumber_Syntax];
  VPKGPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - VPKGPBEnumValue

@implementation VPKGPBEnumValue

@dynamic name;
@dynamic number;
@dynamic optionsArray, optionsArray_Count;

typedef struct VPKGPBEnumValue__storage_ {
  uint32_t _has_storage_[1];
  int32_t number;
  NSString *name;
  NSMutableArray *optionsArray;
} VPKGPBEnumValue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (VPKGPBDescriptor *)descriptor {
  static VPKGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    VPKGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static VPKGPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBEnumValue_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VPKGPBEnumValue__storage_, name),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeString,
      },
      {
        .name = "number",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBEnumValue_FieldNumber_Number,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VPKGPBEnumValue__storage_, number),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeInt32,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.clazz = VPKGPBObjCClass(VPKGPBOption),
        .number = VPKGPBEnumValue_FieldNumber_OptionsArray,
        .hasIndex = VPKGPBNoHasBit,
        .offset = (uint32_t)offsetof(VPKGPBEnumValue__storage_, optionsArray),
        .flags = VPKGPBFieldRepeated,
        .dataType = VPKGPBDataTypeMessage,
      },
    };
    VPKGPBDescriptor *localDescriptor =
        [VPKGPBDescriptor allocDescriptorForClass:VPKGPBObjCClass(VPKGPBEnumValue)
                                   messageName:@"EnumValue"
                               fileDescription:&VPKGPBTypeRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(VPKGPBMessageFieldDescription))
                                   storageSize:sizeof(VPKGPBEnumValue__storage_)
                                         flags:(VPKGPBDescriptorInitializationFlags)(VPKGPBDescriptorInitializationFlag_UsesClassRefs | VPKGPBDescriptorInitializationFlag_Proto3OptionalKnown | VPKGPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VPKGPBOption

@implementation VPKGPBOption

@dynamic name;
@dynamic hasValue, value;

typedef struct VPKGPBOption__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  VPKGPBAny *value;
} VPKGPBOption__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (VPKGPBDescriptor *)descriptor {
  static VPKGPBDescriptor *descriptor = nil;
  if (!descriptor) {
    VPKGPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static VPKGPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = VPKGPBOption_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VPKGPBOption__storage_, name),
        .flags = (VPKGPBFieldFlags)(VPKGPBFieldOptional | VPKGPBFieldClearHasIvarOnZero),
        .dataType = VPKGPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.clazz = VPKGPBObjCClass(VPKGPBAny),
        .number = VPKGPBOption_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VPKGPBOption__storage_, value),
        .flags = VPKGPBFieldOptional,
        .dataType = VPKGPBDataTypeMessage,
      },
    };
    VPKGPBDescriptor *localDescriptor =
        [VPKGPBDescriptor allocDescriptorForClass:VPKGPBObjCClass(VPKGPBOption)
                                   messageName:@"Option"
                               fileDescription:&VPKGPBTypeRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(VPKGPBMessageFieldDescription))
                                   storageSize:sizeof(VPKGPBOption__storage_)
                                         flags:(VPKGPBDescriptorInitializationFlags)(VPKGPBDescriptorInitializationFlag_UsesClassRefs | VPKGPBDescriptorInitializationFlag_Proto3OptionalKnown | VPKGPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
