// Generated by the protocol buffer compiler.  DO NOT EDIT!
// clang-format off
// source: google/protobuf/struct.proto

#import "VPKGPBDescriptor.h"
#import "VPKGPBMessage.h"
#import "VPKGPBRootObject.h"

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class VPKGPBListValue;
@class VPKGPBStruct;
@class VPKGPBValue;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum VPKGPBNullValue

/**
 * `NullValue` is a singleton enumeration to represent the null value for the
 * `Value` type union.
 *
 *  The JSON representation for `NullValue` is JSON `null`.
 **/
typedef VPKGPB_ENUM(VPKGPBNullValue) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  VPKGPBNullValue_VPKGPBUnrecognizedEnumeratorValue = kVPKGPBUnrecognizedEnumeratorValue,
  /** Null value. */
  VPKGPBNullValue_NullValue = 0,
};

VPKGPBEnumDescriptor *VPKGPBNullValue_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL VPKGPBNullValue_IsValidValue(int32_t value);

#pragma mark - VPKGPBStructRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (VPKGPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c VPKGPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
VPKGPB_FINAL @interface VPKGPBStructRoot : VPKGPBRootObject
@end

#pragma mark - VPKGPBStruct

typedef VPKGPB_ENUM(VPKGPBStruct_FieldNumber) {
  VPKGPBStruct_FieldNumber_Fields = 1,
};

/**
 * `Struct` represents a structured data value, consisting of fields
 * which map to dynamically typed values. In some languages, `Struct`
 * might be supported by a native representation. For example, in
 * scripting languages like JS a struct is represented as an
 * object. The details of that representation are described together
 * with the proto support for the language.
 *
 * The JSON representation for `Struct` is JSON object.
 **/
VPKGPB_FINAL @interface VPKGPBStruct : VPKGPBMessage

/** Unordered map of dynamically typed values. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, VPKGPBValue*> *fields;
/** The number of items in @c fields without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger fields_Count;

@end

#pragma mark - VPKGPBValue

typedef VPKGPB_ENUM(VPKGPBValue_FieldNumber) {
  VPKGPBValue_FieldNumber_NullValue = 1,
  VPKGPBValue_FieldNumber_NumberValue = 2,
  VPKGPBValue_FieldNumber_StringValue = 3,
  VPKGPBValue_FieldNumber_BoolValue = 4,
  VPKGPBValue_FieldNumber_StructValue = 5,
  VPKGPBValue_FieldNumber_ListValue = 6,
};

typedef VPKGPB_ENUM(VPKGPBValue_Kind_OneOfCase) {
  VPKGPBValue_Kind_OneOfCase_VPKGPBUnsetOneOfCase = 0,
  VPKGPBValue_Kind_OneOfCase_NullValue = 1,
  VPKGPBValue_Kind_OneOfCase_NumberValue = 2,
  VPKGPBValue_Kind_OneOfCase_StringValue = 3,
  VPKGPBValue_Kind_OneOfCase_BoolValue = 4,
  VPKGPBValue_Kind_OneOfCase_StructValue = 5,
  VPKGPBValue_Kind_OneOfCase_ListValue = 6,
};

/**
 * `Value` represents a dynamically typed value which can be either
 * null, a number, a string, a boolean, a recursive struct value, or a
 * list of values. A producer of value is expected to set one of these
 * variants. Absence of any variant indicates an error.
 *
 * The JSON representation for `Value` is JSON value.
 **/
VPKGPB_FINAL @interface VPKGPBValue : VPKGPBMessage

/** The kind of value. */
@property(nonatomic, readonly) VPKGPBValue_Kind_OneOfCase kindOneOfCase;

/** Represents a null value. */
@property(nonatomic, readwrite) VPKGPBNullValue nullValue;

/** Represents a double value. */
@property(nonatomic, readwrite) double numberValue;

/** Represents a string value. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *stringValue;

/** Represents a boolean value. */
@property(nonatomic, readwrite) BOOL boolValue;

/** Represents a structured value. */
@property(nonatomic, readwrite, strong, null_resettable) VPKGPBStruct *structValue;

/** Represents a repeated `Value`. */
@property(nonatomic, readwrite, strong, null_resettable) VPKGPBListValue *listValue;

@end

/**
 * Fetches the raw value of a @c VPKGPBValue's @c nullValue property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t VPKGPBValue_NullValue_RawValue(VPKGPBValue *message);
/**
 * Sets the raw value of an @c VPKGPBValue's @c nullValue property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetVPKGPBValue_NullValue_RawValue(VPKGPBValue *message, int32_t value);

/**
 * Clears whatever value was set for the oneof 'kind'.
 **/
void VPKGPBValue_ClearKindOneOfCase(VPKGPBValue *message);

#pragma mark - VPKGPBListValue

typedef VPKGPB_ENUM(VPKGPBListValue_FieldNumber) {
  VPKGPBListValue_FieldNumber_ValuesArray = 1,
};

/**
 * `ListValue` is a wrapper around a repeated field of values.
 *
 * The JSON representation for `ListValue` is JSON array.
 **/
VPKGPB_FINAL @interface VPKGPBListValue : VPKGPBMessage

/** Repeated field of dynamically typed values. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<VPKGPBValue*> *valuesArray;
/** The number of items in @c valuesArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger valuesArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
